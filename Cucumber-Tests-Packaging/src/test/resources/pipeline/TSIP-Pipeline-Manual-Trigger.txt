properties([
   buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
   pipelineTriggers([[$class:"SCMTrigger", scmpoll_spec:"H/2 * * * *"]]),
   
])

node {
 def SPRING_CLOUD_DIR = "SpringloudContract"
 def STUB_RUNNER_DIR = "StubServer"
 def CUCUMBER_AUTOMATION_DIR = "Cucumber"
 def GIT_SPRING_CLOUD_URL = "https://tccloud2.toshiba.co.jp/tec/git/test-automation-tsip.spring-cloud-contract-repo.git"
 def GIT_STUB_RUNNER_URL = "https://tccloud2.toshiba.co.jp/tec/git/test-automation-tsip.stub-runner-repo.git"
 def GIT_CUCUMBER_URL = "https://tccloud2.toshiba.co.jp/tec/git/test-automation-tsip.git"
 def GIT_BRANCH = "master"
 def GIT_CREDENTIAL = "00370ecd-dea7-4a07-9015-a444d9e809fe"
 def TEST_MACHINE_IP = "10.113.135.129"
 def TEST_MACHINE_SHARED_DIR = "Test-Artifacts"
 def TEST_MACHINE_USER = "admin"
 def TEST_MACHINE_PASSWORD = "password@123"
 def TEST_MACHINE_AUTHENTICATION_CMD = "net use \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR} ${TEST_MACHINE_PASSWORD} /USER:${TEST_MACHINE_USER}"
 def PSEXEC_CMD = "psexec \\\\${TEST_MACHINE_IP} -u ${TEST_MACHINE_USER} -p ${TEST_MACHINE_PASSWORD} -accepteula cmd /c"
 def PSEXEC_CMD_LOCAL = "psexec -u ${TEST_MACHINE_USER} -p ${TEST_MACHINE_PASSWORD} -accepteula cmd /c"
 
 def PSEXEC_NO_WAIT_CMD = "psexec \\\\${TEST_MACHINE_IP} -u ${TEST_MACHINE_USER} -p ${TEST_MACHINE_PASSWORD} -accepteula -d cmd /c"
 def TEST_MACHINE_MAVEN_REPO_DIR = "C:\\Users\\admin\\.m2\\repository"
 def LOCAL_MACHINE_MAVEN_REPO_DIR = "C:\\Users\\admin\\.m2\\repository"
 def KILL_JAVA_PROCESS_CMD = "taskkill /im java.exe /f"
 def RESTART_CMD = "shutdown -r -f"
 def TEST_MACHINE_AUTOMATION_DIR = "C:\\${TEST_MACHINE_SHARED_DIR}\\Automation"
 def TEST_MACHINE_AUTOMATION_REPORT_DIR = "Execution-Report"

stage('RESTART_TEST_MACHINE') {
try{
     echo "Restarting Machine ${TEST_MACHINE_IP}"
     bat "${PSEXEC_CMD} ${RESTART_CMD}"
    }
  catch(e){
      echo "Restarting ..."
  }
} 
stage('CLEAN_WORKSPACE') {
     echo "Starting Cleaning Workspace"
     
  try{
     echo "Deleting directory ${SPRING_CLOUD_DIR}"
     bat "RMDIR /Q/S ${SPRING_CLOUD_DIR}"
    }
  catch(e){
      echo "Directories do not exist"
  }
  try{
     echo "Deleting directory ${STUB_RUNNER_DIR}"
     bat "RMDIR /Q/S ${STUB_RUNNER_DIR}"
    }
  catch(e){
      echo "Directories do not exist"
  }
  
  try{
     echo "Deleting directory ${CUCUMBER_AUTOMATION_DIR}"
     bat "RMDIR /Q/S ${CUCUMBER_AUTOMATION_DIR}"
    }
  catch(e){
      echo "Directories do not exist"
  }
  
}

stage('CHECKOUT_SPRING_CLOUD_PROJECT') {
  echo "CHECKING OUT SPRING CLOUD CONTRACT PROJECT"  
  dir(SPRING_CLOUD_DIR)
     {
          git branch: "${GIT_BRANCH}", credentialsId: "${GIT_CREDENTIAL}", url: "${GIT_SPRING_CLOUD_URL}"
	 }
  }

stage('CHECKOUT_STUB_RUNNER_PROJECT') {
  echo "CHECKING OUT STUB RUNNER PROJECT"
  dir(STUB_RUNNER_DIR)
     {
           git branch: "${GIT_BRANCH}", credentialsId: "${GIT_CREDENTIAL}", url: "${GIT_STUB_RUNNER_URL}"
	 }
  }
stage('CHECKOUT_CUCUMBER_PROJECT') {
  echo "CHECKING OUT CUCUMBER PROJECT"
  dir(CUCUMBER_AUTOMATION_DIR)
     {
           git branch: "${GIT_BRANCH}", credentialsId: "${GIT_CREDENTIAL}", url: "${GIT_CUCUMBER_URL}"
	 }
  }
  
stage('BUILD_SPRING_CLOUD_CONTRACT') {
  echo "Building Spring Cloud Contract Project..."  
  dir(SPRING_CLOUD_DIR)
     {
           bat "cd  orchestrator && mvn clean install -DskipTests"
	 }
  }
  
stage('BUILD_STUB_RUNNER') {
  echo "Building Stub Server Project ..."  
  dir(STUB_RUNNER_DIR)
     {
           bat "cd stub-runner-boot-master && mvn clean package"
	 }
  }
stage('BUILD_CUCUMBER_AUTOMATION') {
  echo "Building Cucumber Automation Project ..."  
  dir(CUCUMBER_AUTOMATION_DIR)
     {
           bat "cd Cucumber-Tests-Packaging && mvn clean package"
	 }
  }

stage('COPY_ARTEFACTS_TO_TEST_MACHINE') {
 try{ 
	sleep(time:2,unit:"MINUTES")
	echo "Deleting old artefacts..."  
	bat "${TEST_MACHINE_AUTHENTICATION_CMD}"
	bat "del /s /q \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\*.*"
	bat "rmdir /s /q \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\jp"
	bat "rmdir /s /q \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\Automation"
	bat "rmdir /s /q \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\Stub-Server"
	}
 catch(e){
      echo "One or more directory could not be deleted."
  } 
  try
   {
		//bat "cd C:/Users/admin/.m2/repository && jar -cfM stubs.zip jp"
		//bat "cd C:/Users/admin/.m2/repository && copy /Y stubs.zip \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\stubs.zip"
		bat "cd ${LOCAL_MACHINE_MAVEN_REPO_DIR} && xcopy /E /I /Y jp \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\jp"
    }
  catch(e)
   {
		echo "Copying artefacts failed.."
		currentBuild.result = "FAILED"
		throw e
   } 
  dir(STUB_RUNNER_DIR)
     {
		   echo "Copying file stub-server-releases.zip" 
           bat "cd stub-runner-boot-master\\target\\package && copy /Y stub-server-releases.zip \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\stub-server-releases.zip"
	 }
  
  dir(CUCUMBER_AUTOMATION_DIR)
     {
		   echo "Copying file TestAutomation.zip" 
           bat "cd Cucumber-Tests-Packaging\\target\\package && copy /Y TestAutomation.zip \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\TestAutomation.zip"
	 }
  }
  
  stage('DEPLOY_ARTIFACTS_ON_TEST_MACHINE') {
  try
   { 
		echo "Deploying stubs.."  
		bat "${TEST_MACHINE_AUTHENTICATION_CMD}"
		bat "${PSEXEC_CMD} xcopy /E /I /Y C:\\${TEST_MACHINE_SHARED_DIR}\\jp ${TEST_MACHINE_MAVEN_REPO_DIR}\\jp"
		bat "${PSEXEC_CMD} mkdir C:\\${TEST_MACHINE_SHARED_DIR}\\Automation"
		bat "${PSEXEC_CMD} mkdir C:\\${TEST_MACHINE_SHARED_DIR}\\Stub-Server"
		bat "${PSEXEC_CMD} move C:\\${TEST_MACHINE_SHARED_DIR}\\TestAutomation.zip C:\\${TEST_MACHINE_SHARED_DIR}\\Automation"
		bat "${PSEXEC_CMD} move C:\\${TEST_MACHINE_SHARED_DIR}\\stub-server-releases.zip C:\\${TEST_MACHINE_SHARED_DIR}\\Stub-Server"
		bat "${PSEXEC_CMD} (cd C:\\${TEST_MACHINE_SHARED_DIR}\\Automation ^& jar xf TestAutomation.zip)"
		bat "${PSEXEC_CMD} (cd C:\\${TEST_MACHINE_SHARED_DIR}\\Stub-Server ^& jar xf stub-server-releases.zip)"
		try
		{
			bat "${PSEXEC_NO_WAIT_CMD} (cd C:\\${TEST_MACHINE_SHARED_DIR}\\Stub-Server\\bin ^& Start_Stub_Server.bat)"
		}
		catch(e)
		{
			echo "Started Stub Server...."
		}
		sleep(time:2,unit:"MINUTES")
   }
  catch(e)
   {
      echo "Deployment of artefacts FAILED..."
	  currentBuild.result = "FAILED"
	  throw e
   } 
  }
  
  stage('TRIGGER_AUTOMATION') {
  try
   { 
		echo "Triggering Automation..."  
		bat "${PSEXEC_CMD} (cd C:\\${TEST_MACHINE_SHARED_DIR}\\Automation\\bin ^& Trigger_Automation.bat)"
		sleep(time:30,unit:"SECONDS")
   }
  catch(e)
   {
      echo "triggering Automation FAILED..."
	  currentBuild.result = "FAILED"
	  throw e
   } 
  }
  
  stage('GENERATE_AUTOMATION_REPORT') {
  try
   { 
		echo "Generating Automation Report..."  
		bat "${PSEXEC_CMD} (cd C:\\${TEST_MACHINE_SHARED_DIR}\\Automation\\bin ^& Generate_Report.bat)"
		sleep(time:30,unit:"SECONDS")
		bat "${PSEXEC_CMD} (cd ${TEST_MACHINE_AUTOMATION_DIR} ^& jar -cfM Execution-Report.zip ${TEST_MACHINE_AUTOMATION_REPORT_DIR})"
		
		
		
	dir(CUCUMBER_AUTOMATION_DIR)
	{
		bat "${TEST_MACHINE_AUTHENTICATION_CMD}"
		bat "copy \\\\${TEST_MACHINE_IP}\\${TEST_MACHINE_SHARED_DIR}\\Automation\\Execution-Report.zip Cucumber-Tests-Packaging\\target"
		bat "cd Cucumber-Tests-Packaging\\target && jar xf Execution-Report.zip"
	}
		
   }
  catch(e)
   {
      echo "Generating Automation Report FAILED..."
	  currentBuild.result = "FAILED"
	  throw e
   } 
  }
  
  stage('PUBLISH_RESULTS') {
        echo "PUBLISHING TEST RESULTS ON JENKINS"
        dir(CUCUMBER_AUTOMATION_DIR) {
            echo "Publishing Extent Report"
                            		publishHTML (target: [
										allowMissing: false,
										alwaysLinkToLastBuild: true,
										keepAll: true,
										reportDir: "Cucumber-Tests-Packaging\\target\\Execution-Report\\cucumber-html-reports\\cucumber-html-reports",
										reportFiles: "overview-features.html",
										reportName: "TestResultsSandwichReport"
										])
		}
    }
}

def notifyFailed() {
    def MAILING_LIST_JOB_STATUS = "sachin.gupta@toshiba-tsip.com"
    mail to: MAILING_LIST_JOB_STATUS, subject:"FAILED!!! Automation CI (Jenkins Build: ${env.JOB_NAME} ${currentBuild.displayName})", body: "Hi All, \n \nAutomation CI job failed in Jenkins Server.\n \n \nBuild URL: ${BUILD_URL} \n \n \nThe failure may be due to the following reasons: \n 1. Jenkins pipeline script is unable to execute some steps \n 2. Deployment script failed to execute some tasks \n 3. Receiver build is failed at Jenkins Server \n 4. The Test Server is not available \n \n \nThanks & Regards, \n Landing-Zone CI Admin"
}